group = 'com.mantono'
version = '0.2.0'
description = 'description of project'

defaultTasks 'test'

buildscript {
    ext.kotlin_version = '1.3.10'
    ext.jvm_version = '1.8'

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://dl.bintray.com/kotlin/kotlin-eap" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
    }
}

apply plugin: 'org.jetbrains.dokka'
apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'idea'

sourceCompatibility = jvm_version

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
    maven { url "https://jitpack.io" }
}

dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
    compile group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-jdk8', version: '1.0.1'
    compile group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: '1.0.1'
    implementation 'io.github.microutils:kotlin-logging:1.6.20'
    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '2.0.0'
    implementation "com.mantono:pyttipanna:1.0.0"
    implementation "com.mantono:pyttipanna:1.0.0:sources"
    runtime 'ch.qos.logback:logback-classic:1.2.3'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.3.0'
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = "$jvm_version"
    kotlinOptions {
        languageVersion = "1.3"
    }
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "$jvm_version"
}

dokka {
    outputFormat = 'html'
    outputDirectory = "doc"
    jdkVersion = 8
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
    inputs.dir 'src/main/kotlin'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

wrapper {
    description = 'Generates gradlew[.bat] scripts for faster execution'
    gradleVersion = '5.0'
}